Sherry Hu
sxh2

Questions here will come from the assignment
writeup. Be sure to copy paste questions and 
your explanations before you push to GitHub and
do that before uploading to Gradescope

Question 1: are the benchmark timings for StringStrand consistent with the 
explanation below that the time to execute cutAndSplice is O(b2S)? 
Note that the value of b is half the number of calls to append since each cut 
(except the first) is modeled by two calls of append in the method cutAndSplice -- 
see the code. This means that b2 will be constant in the benchmark, but S will vary. 

Class	                splicee	      recomb	time	appends
-----
StringStrand:	            256	      4,800,471	0.987	1290
StringStrand:	            512	      4,965,591	1.065	1290
StringStrand:	          1,024	      5,295,831	1.355	1290
StringStrand:	          2,048	      5,956,311	1.389	1290
StringStrand:	          4,096	      7,277,271	1.756	1290
StringStrand:	          8,192	      9,919,191	2.487	1290
StringStrand:	         16,384	     15,203,031	3.760	1290
StringStrand:	         32,768	     25,770,711	6.616	1290
StringStrand:	         65,536	     46,906,071	11.959	1290
StringStrand:	        131,072	     89,176,791	24.625	1290
StringStrand:	        262,144	    173,718,231	47.552	1290
StringStrand:	        524,288	    342,801,111	83.572	1290
StringStrand:	      1,048,576	    680,966,871	172.293	1290

Yes; it is consistent. If we look at splicee with length 65,536 to the end, we can see that 
with each doubling in length of splicee we get a rough doubling in time. This is because b 
stays constant and S is doubling, meaning runtime should roughly double.

Question 2: are the benchmark timings for StringBuilderStrand consistent with the 
explanation below that the time to execute cutAndSplice is O(bS)? 
Note that the value of b is half the number of calls to append since each cut 
(except the first) is modeled by two calls of append in the method cutAndSplice -- 
see the code. This means that b will be constant in the benchmark, but S will vary. 

Class	                splicee	      recomb	time	appends
-----
StringBuilderStrand:	            256	      4,800,471	0.035	1290
StringBuilderStrand:	            512	      4,965,591	0.023	1290
StringBuilderStrand:	          1,024	      5,295,831	0.013	1290
StringBuilderStrand:	          2,048	      5,956,311	0.012	1290
StringBuilderStrand:	          4,096	      7,277,271	0.010	1290
StringBuilderStrand:	          8,192	      9,919,191	0.016	1290
StringBuilderStrand:	         16,384	     15,203,031	0.017	1290
StringBuilderStrand:	         32,768	     25,770,711	0.041	1290
StringBuilderStrand:	         65,536	     46,906,071	0.063	1290
StringBuilderStrand:	        131,072	     89,176,791	0.129	1290
StringBuilderStrand:	        262,144	    173,718,231	0.253	1290
StringBuilderStrand:	        524,288	    342,801,111	0.431	1290

Yes; runtime should also roughly double, since b is still constant and S is doubling each time. 
From splicee length 65,546 to the end, we see the times roughly doubling. 

Question 3: Explain why the time for LinkStrand does not change much at all over 
all the runs in the benchmark program. Explain why you think memory is exhausted at 
the specific strand size you see in your timings -- as compared to exhaustion for 
String and StringBuilder.

Class	                splicee	      recomb	time	appends
-----
LinkStrand:	            256	      4,800,471	0.037	1290
LinkStrand:	            512	      4,965,591	0.025	1290
LinkStrand:	          1,024	      5,295,831	0.005	1290
LinkStrand:	          2,048	      5,956,311	0.008	1290
LinkStrand:	          4,096	      7,277,271	0.009	1290
LinkStrand:	          8,192	      9,919,191	0.007	1290
LinkStrand:	         16,384	     15,203,031	0.006	1290
LinkStrand:	         32,768	     25,770,711	0.009	1290
LinkStrand:	         65,536	     46,906,071	0.010	1290
LinkStrand:	        131,072	     89,176,791	0.009	1290
LinkStrand:	        262,144	    173,718,231	0.007	1290
LinkStrand:	        524,288	    342,801,111	0.012	1290
LinkStrand:	      1,048,576	    680,966,871	0.010	1290
LinkStrand:	      2,097,152	  1,357,298,391	0.008	1290
LinkStrand:	      4,194,304	  2,709,961,431	0.011	1290
LinkStrand:	      8,388,608	  5,415,287,511	0.008	1290
LinkStrand:	     16,777,216	 10,825,939,671	0.007	1290
LinkStrand:	     33,554,432	 21,647,243,991	0.009	1290
LinkStrand:	     67,108,864	 43,289,852,631	0.010	1290
LinkStrand:	    134,217,728	 86,575,069,911	0.007	1290
LinkStrand:	    268,435,456	173,145,504,471	0.010	1290
LinkStrand:	    536,870,912	346,286,373,591	0.011	1290

The LinkStrand class is very efficient because pointers can point to the same string, meaning
it is constant time. This is why memory takes so much longer to be exhausted (536,870,912 
splicee length vs. StringBuilderStrand's 524,288 splicee length vs. StringStrand's 
1,048,576 length).
